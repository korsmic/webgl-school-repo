---
import Layout from "@layouts/Layout.astro";

// dodecahedron
// octahedron
// sphere
// icosahedron
// cone
// torus
const contents = [
  {
    name: "DodecahedronGeometry",
    text: "(radius : Float, detail : Integer)",
    detail: [
      {
        name: "radius",
        text: "Radius of the dodecahedron. Default is 1.",
      },
      {
        name: "detail",
        text: "Default is 0. Setting this to a value greater than 0 adds vertices making it no longer a dodecahedron.",
      },
    ],
  },
  {
    name: "OctahedronGeometry",
    text: "(radius : Float, detail : Integer)",
    detail: [
      {
        name: "radius",
        text: "Radius of the octahedron. Default is 1.",
      },
      {
        name: "detail",
        text: "Default is 0. Setting this to a value greater than zero add vertices making it no longer an octahedron.",
      },
    ],
  },
  {
    name: "SphereGeometry",
    text: "(radius : Float, widthSegments : Integer, heightSegments : Integer, phiStart : Float, phiLength : Float, thetaStart : Float, thetaLength : Float)",
    detail: [
      {
        name: "radius",
        text: "sphere radius. Default is 1.",
      },
      {
        name: "widthSegments",
        text: "number of horizontal segments. Minimum value is 3, and the default is 32.",
      },
      {
        name: "heightSegments",
        text: "number of vertical segments. Minimum value is 2, and the default is 16.",
      },
      {
        name: "phiStart",
        text: "specify horizontal starting angle. Default is 0.",
      },
      {
        name: "phiLength",
        text: "specify horizontal sweep angle size. Default is Math.PI * 2.",
      },
      {
        name: "thetaStart",
        text: "specify vertical starting angle. Default is 0.",
      },
      {
        name: "thetaLength",
        text: "specify vertical sweep angle size. Default is Math.PI.",
      },
    ],
  },
  {
    name: "IcosahedronGeometry",
    text: "(radius : Float, detail : Integer)",
    detail: [
      {
        name: "radius",
        text: "Default is 1.",
      },
      {
        name: "detail",
        text: "Default is 0. Setting this to a value greater than 0 adds more vertices making it no longer an icosahedron. When detail is greater than 1, it's effectively a sphere.",
      },
    ],
  },
  {
    name: "ConeGeometry",
    text: "(radius : Float, height : Float, radialSegments : Integer, heightSegments : Integer, openEnded : Boolean, thetaStart : Float, thetaLength : Float)",
    detail: [
      {
        name: "radius",
        text: "Radius of the cone base. Default is 1.",
      },
      {
        name: "height",
        text: "Height of the cone. Default is 1.",
      },
      {
        name: "radialSegments",
        text: "Number of segmented faces around the circumference of the cone. Default is 32",
      },
      {
        name: "heightSegments",
        text: "Number of rows of faces along the height of the cone. Default is 1.",
      },
      {
        name: "openEnded",
        text: "A Boolean indicating whether the base of the cone is open or capped. Default is false, meaning capped.",
      },
      {
        name: "thetaStart",
        text: "Start angle for first segment, default = 0 (three o'clock position).",
      },
      {
        name: "thetaLength",
        text: "The central angle, often called theta, of the circular sector. The default is 2*Pi, which makes for a complete cone.",
      },
    ],
  },
  {
    name: "TorusGeometry",
    text: "(radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float)",
    detail: [
      {
        name: "radius",
        text: "Radius of the torus, from the center of the torus to the center of the tube. Default is 1.",
      },
      {
        name: "tube",
        text: "Radius of the tube. Default is 0.4.",
      },
      {
        name: "radialSegments",
        text: "Default is 12",
      },
      {
        name: "tubularSegments",
        text: "Default is 48.",
      },
      {
        name: "arc",
        text: "Central angle. Default is Math.PI * 2.",
      },
    ],
  },
];
---

<Layout pageId="t04_3">
  <div id="webgl"></div>
  {
    contents.map((content, index) => (
      <div class="p_geometryInfo" data-id={String(index)}>
        <button class="p_geometryInfo_close" />
        <div class="p_geometryInfo_wrap">
          <h2>{content.name}</h2>
          <p>{content.text}</p>
          <dl>
            {content.detail.map((detail) => (
              <dt>{detail.name}</dt>
              <dd>{detail.text}</dd>
            ))}
          </dl>
        </div>
      </div>
    ))
  }
  <script>
    import "../../ts/t04_3.ts";
  </script>
</Layout>
